import type { Grid } from '../types';

/**
 * Creates a 2D grid (matrix) of specified dimensions and fills it using a builder function.
 *
 * @template T - The type of values stored in the grid.
 * @param {number} rows - The number of rows in the grid.
 * @param {number} cols - The number of columns in the grid.
 * @param {(row: number, col: number) => T} builder - A function that returns the value to place at each cell
 *                                                    based on its row and column index.
 * @returns {Grid<T>} A 2D array (grid) filled with values generated by the builder function.
 *
 * @example
 * const grid = createGrid(2, 3, (row, col) => `${row},${col}`);
 * // Result:
 * // [
 * //   ['0,0', '0,1', '0,2'],
 * //   ['1,0', '1,1', '1,2']
 * // ]
 */
export function createGrid<T>(
	rows: number,
	cols: number,
	builder: (row: number, col: number) => T
): Grid<T> {
	return Array.from({ length: rows }, (_, i) => {
		return Array.from({ length: cols }, (_, j) => builder(i, j));
	});
}
